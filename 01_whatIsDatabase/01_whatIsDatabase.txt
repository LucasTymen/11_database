What is a database and SQL

Before we continue our Djourney into models, we need to get a sense of databases
— because databases are where we will ultimately store our models’ information and provide the structure for our projects’ and apps’ data.
https://www.sqlite.org/index.html


As mentioned earlier in the introduction, SQLite comes pre-installed with Python.
We’ve also configured this database to work on our site for your convenience as you progress through Django lessons and projects.
https://en.wikipedia.org/wiki/SQL


The “Lite” part of SQLite’s name implies that it’s a lightweight database perfect for small, personal applications.
The other portion “SQL“, pronounced like the word “sequel”, refers to the Structured Query Language which is used to interact with the database.
But, as part of Django’s “swiss army knife” approach, developers can still interact with their databases even without knowing SQL because of Django’s Object-Relational Mapping, or ORM.
Simply speaking, we’re able to write Python code to interact with our SQLite database!
https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping



=============================================================
Object–relational mapping

    Article
    Talk

    Read
    Edit
    View history

Tools

From Wikipedia, the free encyclopedia
Not to be confused with Object-role modeling.

This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.
Find sources: "Object–relational mapping" – news · newspapers · books · scholar · JSTOR (May 2009) (Learn how and when to remove this template message)

Object–relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between a relational database and the heap of an object-oriented programming language. This creates, in effect, a virtual object database that can be used from within the programming language.

In object-oriented programming, data-management tasks act on objects that combine scalar values into objects. For example, consider an address book entry that represents a single person along with zero or more phone numbers and zero or more addresses. This could be modeled in an object-oriented implementation by a "Person object" with an attribute/field to hold each data item that the entry comprises: the person's name, a list of phone numbers, and a list of addresses. The list of phone numbers would itself contain "PhoneNumber objects" and so on. Each such address-book entry is treated as a single object by the programming language (it can be referenced by a single variable containing a pointer to the object, for instance). Various methods can be associated with the object, such as methods to return the preferred phone number, the home address, and so on.

By contrast, relational databases, such as SQL, group scalars into tuples, which are then enumerated in tables. Tuples and objects have some general similarity, in that they are both ways to collect values into named fields such that the whole collection can be manipulated as a single compound entity. They have many differences, though, in particular: lifecycle management (row insertion and deletion, versus garbage collection or reference counting), references to other entities (object references, versus foreign key references), and inheritance (non-existent in relational databases). As well, objects are managed on-heap and are under full control of a single process, while database tuples are shared and must incorporate locking, merging, and retry. Object–relational mapping provides automated support for mapping tuples to objects and back, while accounting for all of these differences.[1]

The heart of the problem involves translating the logical representation of the objects into an atomized form that is capable of being stored in the database while preserving the properties of the objects and their relationships so that they can be reloaded as objects when needed. If this storage and retrieval functionality is implemented, the objects are said to be persistent.[1]
Overview

Implementation-specific details of storage drivers are generally wrapped in an API in the programming language in use, exposing methods to interact with the storage medium in a way which is simpler and more in line with the paradigms of surrounding code.

The following is a simple example, written in C# code, to execute a query written in SQL using a database engine.

var sql = "SELECT id, first_name, last_name, phone, birth_date, sex, age FROM persons WHERE id = 10";
var result = context.Persons.FromSqlRaw(sql).ToList();
var name = result[0]["first_name"];

In contrast, the following makes use of an ORM-job API which makes it possible to write code that naturally makes use of the features of the language.

var person = repository.GetPerson(10);
var firstName = person.GetFirstName();

The case above makes use of an object representing the storage repository and methods of that object. Other frameworks might provide code as static methods, as in the example below, and yet other methods may not implement an object-oriented system at all. Often the choice of paradigm is made for the best fit of the ORM into the surrounding language's design principles.

var person = Person.Get(10);

Comparison with traditional data access techniques

Compared to traditional techniques of exchange between an object-oriented language and a relational database, ORM often reduces the amount of code that needs to be written.[2]

Disadvantages of ORM tools generally stem from the high level of abstraction obscuring what is actually happening in the implementation code. Also, heavy reliance on ORM software has been cited as a major factor in producing poorly designed databases.[3]
Object-oriented databases

Another approach is to use an object-oriented database management system (OODBMS) or document-oriented databases such as native XML databases that provide more flexibility in data modeling. OODBMSs are databases designed specifically for working with object-oriented values. Using an OODBMS eliminates the need for converting data to and from its SQL form, as the data is stored in its original object representation and relationships are directly represented, rather than requiring join tables/operations. The equivalent of ORMs for document-oriented databases are called object-document mappers (ODMs).

Document-oriented databases also prevent the user from having to "shred" objects into table rows. Many of these systems also support the XQuery query language to retrieve datasets.

Object-oriented databases tend to be used in complex, niche applications. One of the arguments against using an OODBMS is that it may not be able to execute ad-hoc, application-independent queries.[citation needed] For this reason, many programmers find themselves more at home with an object-SQL mapping system, even though most object-oriented databases are able to process SQL queries to a limited extent. Other OODBMS provide replication to SQL databases, as a means of addressing the need for ad-hoc queries, while preserving well-known query patterns.[citation needed]
Challenges

A variety of difficulties arise when considering how to match an object system to a relational database. These difficulties are referred to as the object–relational impedance mismatch.[4]

An alternative to implementing ORM is use of the native procedural languages provided with every major database. These can be called from the client using SQL statements. The Data Access Object (DAO) design pattern is used to abstract these statements and offer a lightweight object-oriented interface to the rest of the application.[5]
See also

    List of object–relational mapping software
    Comparison of object–relational mapping software
    AutoFetch – automatic query tuning
    Common Object Request Broker Architecture (CORBA)
    Object database
    Object persistence
    Object–relational database
    Object–relational impedance mismatch
    Relational model
        SQL (Structured Query Language)
    Java Data Objects
    Service Data Objects
    Entity Framework
    Active record pattern
    Data mapper pattern
    Single Table Inheritance

References

"What is Object/Relational Mapping?". Hibernate Overview. JBOSS Hibernate. Retrieved 27 January 2022.
Douglas Barry, Torsten Stanienda, "Solving the Java Object Storage Problem," Computer, vol. 31, no. 11, pp. 33-40, Nov. 1998, [https://www.computer.org/csdl/magazine/co/1998/11/ry033/13rRUxC0SRY. Excerpt at https://www.service-architecture.com/articles/object-relational-mapping/transparent-persistence-vs-jdbc-call-level-interface.html Lines of code using O/R are only a fraction of those needed for a call-level interface (1:4). For this exercise, 496 lines of code were needed using the ODMG Java Binding compared to 1,923 lines of code using JDBC.
Josh Berkus, "Wrecking Your Database", Computer, Aug. 2009, https://www.toolbox.com/tech/data-management/blogs/wrecking-your-database-080509/
Object–Relational Mapping Revisited - A Quantitative Study on the Impact of Database Technology on O/R Mapping Strategies. M Lorenz, JP Rudolph, G Hesse, M Uflacker, H Plattner. Hawaii International Conference on System Sciences (HICSS), 4877-4886 (DOI:10.24251/hicss.2017.592)

    Feuerstein, Steven; Bill Pribyl (September 1997). "Oracle PL/SQL Programming". 18.5 Modifying Persistent Objects. Retrieved 23 August 2011.

External links

    About ORM by Anders Hejlsberg
    Mapping Objects to Relational Databases: O/R Mapping In Detail by Scott W. Ambler

    vte

Database
Main

    Requirements Theory Models Database management system Machine Server Application Connection
        datasource DSN Administrator Lock Types Tools

Languages

    Data definition Data manipulation Query
        information retrieval

Security

    Activity monitoring Audit Forensics Negative database

Design

    Entities and relationships (and Enhanced notation) Normalization Schema Refactoring Cardinality

Programming

    Abstraction layer Object–relational mapping

Management

    Virtualization Tuning
        caching Migration Preservation Integrity

Lists

    Academic databases Biological databases Biodiversity databases Facial expression databases Online databases Online music databases Online real estate databases

See also

    Database-centric architecture Intelligent database Two-phase locking Locks with ordered sharing Load file Publishing Halloween Problem Log shipping

    Category WikiProject

Categories:

    Object-relational mappingData mapping
